name: Destroy Strapi AWS Infrastructure

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TERRAFORM_DIR: terraform
  TF_STATE_BUCKET: strapi-terraform-state
  TF_STATE_KEY: strapi/state/terraform.tfstate
  TF_DYNAMODB_TABLE: strapi-terraform-lock

jobs:
  destroy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug directory structure
        run: |
          echo "Listing repository root contents:"
          ls -la
          echo "Current working directory:"
          pwd
          echo "Listing terraform directory contents (if exists):"
          ls -la ${{ env.TERRAFORM_DIR }} || echo "No terraform directory found"
          echo "Checking for Terraform configuration files:"
          if [ -f main.tf ]; then
            echo "Found main.tf in root"
          elif [ -f ${{ env.TERRAFORM_DIR }}/main.tf ]; then
            echo "Found main.tf in terraform directory"
          else
            echo "Error: No main.tf found in root or terraform directory"
            exit 1
          fi
          echo "Checking for modules directory:"
          if [ -d modules ] || [ -d ${{ env.TERRAFORM_DIR }}/modules ]; then
            echo "Modules directory found"
          else
            echo "Warning: No modules directory found in root or terraform directory"
            mkdir -p ${{ env.TERRAFORM_DIR }}/modules
          fi

      - name: Set up Terraform directory
        run: |
          echo "Setting up Terraform directory"
          mkdir -p ${{ env.TERRAFORM_DIR }}
          if [ -f main.tf ] && [ ! -f ${{ env.TERRAFORM_DIR }}/main.tf ]; then
            mv *.tf ${{ env.TERRAFORM_DIR }}/
            if [ -d modules ]; then
              mv modules ${{ env.TERRAFORM_DIR }}/
            fi
          fi
          echo "Terraform directory contents after setup:"
          ls -la ${{ env.TERRAFORM_DIR }} || echo "Terraform directory is empty"
          if [ -f ${{ env.TERRAFORM_DIR }}/main.tf ]; then
            echo "Contents of main.tf:"
            cat ${{ env.TERRAFORM_DIR }}/main.tf
          else
            echo "Error: main.tf still not found in terraform directory"
            exit 1
          fi

      - name: Set Terraform working directory
        id: set-working-dir
        run: |
          if [ -f ${{ env.TERRAFORM_DIR }}/main.tf ]; then
            echo "TERRAFORM_WORKING_DIR=${{ env.TERRAFORM_DIR }}" >> $GITHUB_ENV
          else
            echo "TERRAFORM_WORKING_DIR=." >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform init -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" -backend-config="key=${{ env.TF_STATE_KEY }}" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=${{ env.TF_DYNAMODB_TABLE }}"
        continue-on-error: false

      - name: Terraform Refresh
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform refresh
        continue-on-error: true

      - name: Verify Terraform State
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: |
          echo "Checking Terraform state in S3:"
          aws s3 ls s3://${{ env.TF_STATE_BUCKET }}/${{ env.TF_STATE_KEY }} || echo "State file not found in S3"
          terraform state list

      - name: Terraform Destroy
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform destroy -auto-approve -var="domain_name=${{ secrets.DOMAIN_NAME }}"