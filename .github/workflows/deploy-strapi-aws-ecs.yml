name: Deploy Strapi to AWS ECS



on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  TERRAFORM_DIR: terraform

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug directory structure
        run: |
          echo "Listing repository root contents:"
          ls -la
          echo "Current working directory:"
          pwd
          echo "Listing terraform directory contents (if exists):"
          ls -la ${{ env.TERRAFORM_DIR }} || echo "No terraform directory found"
          echo "Checking for Terraform configuration files:"
          if [ -f main.tf ]; then
            echo "Found main.tf in root"
          elif [ -f ${{ env.TERRAFORM_DIR }}/main.tf ]; then
            echo "Found main.tf in terraform directory"
          else
            echo "Error: No main.tf found in root or terraform directory"
            exit 1
          fi

      - name: Set up Terraform directory
        run: |
          echo "Setting up Terraform directory"
          mkdir -p ${{ env.TERRAFORM_DIR }}
          if [ -f main.tf ] && [ ! -f ${{ env.TERRAFORM_DIR }}/main.tf ]; then
            mv *.tf ${{ env.TERRAFORM_DIR }}/
            if [ -d modules ]; then
              mv modules ${{ env.TERRAFORM_DIR }}/
            fi
          fi
          echo "Terraform directory contents after setup:"
          ls -la ${{ env.TERRAFORM_DIR }} || echo "Terraform directory is empty"

      - name: Set Terraform working directory
        id: set-working-dir
        run: |
          if [ -f ${{ env.TERRAFORM_DIR }}/main.tf ]; then
            echo "TERRAFORM_WORKING_DIR=${{ env.TERRAFORM_DIR }}" >> $GITHUB_ENV
          else
            echo "TERRAFORM_WORKING_DIR=." >> $GITHUB_ENV
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform init
        continue-on-error: false

      - name: Terraform Plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform plan -out=tfplan
        continue-on-error: false

      - name: Terraform Apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
        id: tf-outputs
        run: |
          echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=$(terraform output -raw aws_access_key_id)" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(terraform output -raw aws_secret_access_key)" >> $GITHUB_ENV

      - name: Update GitHub Secrets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh secret set AWS_ACCESS_KEY_ID -b "${{ env.AWS_ACCESS_KEY_ID }}"
          gh secret set AWS_SECRET_ACCESS_KEY -b "${{ env.AWS_SECRET_ACCESS_KEY }}"
          gh secret set ECR_REPOSITORY_URL -b "${{ env.ECR_REPOSITORY_URL }}"
        continue-on-error: true

      - name: Build and push Docker image
        env:
          DOCKER_IMAGE: ${{ env.ECR_REPOSITORY_URL }}:latest
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} .
          docker push ${{ env.DOCKER_IMAGE }}